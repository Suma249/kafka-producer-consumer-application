package com.learning.kafka.service;

import java.util.concurrent.CompletableFuture;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Service;

@Service
public class KafkaMessagePublisher {
	
	@Autowired
	private KafkaTemplate<String, Object> template;
	
	public void sendMessageToTopic(String message) {
		CompletableFuture<SendResult<String, Object>> future=template.send("first-topic",message);
		//to block sending thread and get he resukt about the send messages, we can do futre.get than it will wait for the reskts
		future.whenComplete((result,ex)->{
			if(ex==null)
				System.out.println("sent message=["+message+"] with offset=["+result.getRecordMetadata().offset()+"]");
			else
				System.out.println("unable to send message["+message+"] dure to"+ex.getMessage());
		});
		
	}
}
